{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Sigil",
  "scopeName": "source.sigil",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#entities" },
    { "include": "#operators" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.sigil",
          "match": "#.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.sigil",
          "match": "\\b(if|else|loop|for|in|return|break|continue|match|throw|try|catch|finally|with|yield|await|async|defer|goto|assert|using|perform|resume)\\b"
        },
        {
          "name": "storage.type.sigil",
          "match": "\\b(let|fn|function|class|import|from|as|enum|struct|union|module)\\b"
        },
        {
          "name": "storage.modifier.sigil",
          "match": "\\b(const|pub|static|abstract|export|global|local|lazy|delete)\\b"
        },
        {
          "name": "support.type.sigil",
          "match": "\\b(byte|int8|int32|int64|float32|float64|complex|bool|string|ellipsis|none|array|list|tuple|map|set|callable|object)\\b"
        },
        {
          "name": "constant.language.sigil",
          "match": "\\b(true|false|none|self|super|main|new)\\b"
        },
        {
          "name": "keyword.operator.logical.sigil",
          "match": "\\b(and|or|not|is)\\b"
        },
        {
          "name": "keyword.other.lambda.sigil",
          "match": "\\b(lambda)\\b|λ|Λ"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.sigil",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.sigil",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.interpolated.sigil",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape.sigil",
              "match": "\\\\."
            },
            {
              "name": "variable.interpolation.sigil",
              "begin": "\\{",
              "end": "\\}",
              "captures": {
                "0": { "name": "punctuation.section.embedded.sigil" }
              },
              "patterns": [
                {
                  "name": "entity.name.variable.interpolated.sigil",
                  "match": "[a-zA-Z_][a-zA-Z0-9_]*"
                }
              ]
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.sigil",
          "match": "\\b((0(x|X)[0-9a-fA-F_]+)|(0(b|B)[01_]+)|(0(o|O)[0-7_]+)|(([0-9_]+(\\.[0-9_]*)?|\\.[0-9_]+)([eE][+-]?[0-9_]+)?))i?\\b"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "name": "variable.other.assignment.sigil",
          "match": "(?<=\\b(let|const)\\s+)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*=[^=])"
        },
        {
          "begin": "\\b(fn|function)\\s+",
          "beginCaptures": {
            "1": { "name": "storage.type.function.sigil" }
          },
          "end": "\\(",
          "patterns": [
            {
              "name": "entity.name.function.sigil",
              "match": "[a-zA-Z_][a-zA-Z0-9_]*"
            }
          ]
        },
        {
          "begin": "\\b(class)\\s+",
          "beginCaptures": {
            "1": { "name": "storage.type.class.sigil" }
          },
          "end": "(:|\\n)",
          "patterns": [
            {
              "name": "entity.name.type.class.sigil",
              "match": "[a-zA-Z_][a-zA-Z0-9_]*"
            }
          ]
        },
        {
          "name": "variable.parameter.sigil",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*:)"
        },
        {
          "name": "entity.name.decorator.sigil",
          "match": "(?<=^|\\s)(@[a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "name": "support.type.generic.sigil",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\[)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.sigil",
          "match": "(:=|\\+=|-=|\\*=|/=|%=|//=|\\*\\*=|&=|\\|=|^=|>>=|<<=|=)"
        },
        {
          "name": "keyword.operator.arithmetic.sigil",
          "match": "(\\+\\+|--|\\*\\*|//|\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.comparison.sigil",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.bitwise.sigil",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.arrow.sigil",
          "match": "(->|=>)"
        },
        {
          "name": "keyword.operator.pipe.sigil",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.ternary.sigil",
          "match": "\\?|:"
        },
        {
          "name": "keyword.operator.special.sigil",
          "match": "\\.\\.\\."
        }
      ]
    },
    "punctuation": {
      "patterns": [
        { "name": "punctuation.terminator.statement.sigil", "match": ";" },
        { "name": "punctuation.separator.comma.sigil", "match": "," },
        { "name": "punctuation.accessor.dot.sigil", "match": "\\." },
        { "name": "punctuation.section.parens.begin.sigil", "match": "\\(" },
        { "name": "punctuation.section.parens.end.sigil", "match": "\\)" },
        { "name": "punctuation.section.braces.begin.sigil", "match": "\\{" },
        { "name": "punctuation.section.braces.end.sigil", "match": "\\}" },
        { "name": "punctuation.section.brackets.begin.sigil", "match": "\\[" },
        { "name": "punctuation.section.brackets.end.sigil", "match": "\\]" }
      ]
    }
  }
}
